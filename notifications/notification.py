import redis
from dotenv import load_dotenv
import os
import time
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from notifications.connect_tgbot import Bot
from notifications.email_sender import EmailSender

load_dotenv()

REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")
STREAM_KEY = "alerts_stream"

class RedisHandler:
    def __init__(self):
        print("Connecting to Redis...", flush=True)
        self.redis = redis.Redis.from_url(REDIS_URL, decode_responses=True)
        print(f"Connected to Redis at {REDIS_URL}", flush=True)
        self.bot = Bot()
        self.email_sender = EmailSender()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ stream –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if self.redis.exists(STREAM_KEY):
            self.redis.delete(STREAM_KEY)
            print(f"üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π stream '{STREAM_KEY}' –æ—á–∏—â–µ–Ω", flush=True)
        
    def listener(self):
        print('Listener started', flush=True)
        last_id = "0"

        while True:
            try:
                messages = self.redis.xread({STREAM_KEY: last_id}, block=0)
                for stream, entries in messages:
                    for message_id, data in entries:
                        last_id = message_id
                        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}", flush=True)

                        text = (
                            f"üö® <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
                            f"ID: <code>{data['id']}</code>\n"
                            f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {float(data['severity']):.2f}\n"
                            f"–î–µ—Ç–∞–ª–∏:\n{data['details']}"
                        )
                        self.bot._send_message(text)

                        self.email_sender.send_alert_email(
                            transaction_id=data['id'],
                            details=data['details'],
                            severity=float(data['severity'])
                        )
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Streams: {e}", flush=True)
                time.sleep(2)
                    
    def send_alert(self, id, details, severity):
        message = {
            "id": str(id),
            "details": details,
            "severity": str(severity)
        }
        self.redis.xadd(STREAM_KEY, message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis Stream: {message}", flush=True)


# # –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# redis_handler = RedisHandler()

# # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# redis_handler.send_alert(id=10, details='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', severity=0.56)

# # –ó–∞–ø—É—Å–∫ listener-–∞
# redis_handler.listener()
