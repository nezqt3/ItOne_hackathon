import redis
from dotenv import load_dotenv
import os
import time
import sys
import json
from datetime import datetime, timezone

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from notifications.connect_tgbot import Bot
from notifications.email_sender import EmailSender

load_dotenv()

REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")
STREAM_KEY = "alerts_stream"


def parse_details(data: dict) -> dict:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è details –∏–∑ Redis Stream"""
    details_raw = data.get('details', '{}')
    if isinstance(details_raw, str):
        try:
            details = json.loads(details_raw)
            if isinstance(details, str):
                details = json.loads(details)
        except json.JSONDecodeError:
            details = {}
    else:
        details = details_raw
    return details


def format_email_alert(data: dict) -> str:
    details = parse_details(data)
    transaction = details.get("transaction", {})
    risk_level = details.get("risk_level", "low")
    triggered_rules = details.get("triggered_rules", [])

    rows = ""
    for k, v in transaction.items():
        rows += f"<tr><td><b>{k}</b></td><td>{v}</td></tr>"

    rules_html = ", ".join(triggered_rules) if triggered_rules else "–ù–µ—Ç"

    html_body = f"""
    <html>
    <body>
        <h2>üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</h2>
        <p><b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {data.get('id', 'UNKNOWN')}</p>
        <p><b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({float(data.get('severity', 0)):.2f})</p>
        <p><b>–°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b> {rules_html}</p>
        <table border="1" cellpadding="5" cellspacing="0">
            <thead>
                <tr><th>–ü–æ–ª–µ</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>
            </thead>
            <tbody>
                {rows}
            </tbody>
        </table>
    </body>
    </html>
    """
    return html_body


def format_telegram_alert(data: dict) -> str:
    details = parse_details(data)
    transaction = details.get("transaction", {})
    risk_level = details.get("risk_level", "low")
    triggered_rules = details.get("triggered_rules", [])

    severity = float(data.get('severity', 0))
    tx_id = data.get('id', 'UNKNOWN')

    if severity >= 0.8:
        risk_emoji = "üî•"
    elif severity >= 0.5:
        risk_emoji = "‚ö†Ô∏è"
    else:
        risk_emoji = "‚ÑπÔ∏è"

    rules_text = ", ".join(triggered_rules) if triggered_rules else "–ù–µ—Ç"

    alert_text = (
        f"{risk_emoji} <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b>\n"
        f"<b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{tx_id}</code>\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level} ({severity:.2f})\n"
        f"<b>–°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b> {rules_text}\n"
        f"<b>–î–µ—Ç–∞–ª–∏:</b>\n<pre>{json.dumps(transaction, indent=2)}</pre>\n"
    )
    return alert_text



class RedisHandler:
    def __init__(self):
        print("Connecting to Redis...", flush=True)
        self.redis = redis.Redis.from_url(REDIS_URL, decode_responses=True)
        print(f"Connected to Redis at {REDIS_URL}", flush=True)
        self.bot = Bot()
        self.email_sender = EmailSender()

        # –û—á–∏—â–∞–µ–º stream –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if self.redis.exists(STREAM_KEY):
            self.redis.delete(STREAM_KEY)
            print(f"üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π stream '{STREAM_KEY}' –æ—á–∏—â–µ–Ω", flush=True)

    def listener(self):
        print('Listener started', flush=True)
        last_id = "0"

        while True:
            try:
                messages = self.redis.xread({STREAM_KEY: last_id}, block=0)
                for stream, entries in messages:
                    for message_id, data in entries:
                        last_id = message_id
                        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}", flush=True)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                        text = format_telegram_alert(data)
                        self.bot._send_message(text)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Email
                        html_content = format_email_alert(data)
                        self.email_sender.send_alert_email(
                            transaction_id=data['id'],
                            details=html_content,
                            severity=float(data['severity'])
                        )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Streams: {e}", flush=True)
                time.sleep(2)

    def send_alert(self, id, details, severity):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis Stream
        details –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ JSON —Å –ø–æ–ª—è–º–∏:
        transaction, risk_level, triggered_rules
        """
        message = {
            "id": str(id),
            "details": json.dumps(details),
            "severity": str(severity)
        }
        self.redis.xadd(STREAM_KEY, message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis Stream: {message}", flush=True)
